AWSTemplateFormatVersion: 2010-09-09 
Description: FCNI App VPC fitted with public and private subnets to host a survey database and other related resources.

Resources: 
  VPC: 
    Type: AWS::EC2::VPC 
    Properties: 
      CidrBlock: 10.0.0.0/16 
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      InstanceTenancy: default 
      Tags: 
      - Key: Name
        Value: fcniAppVPC

  # InternetGateway Setup
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
       VpcId: !Ref VPC
       InternetGatewayId: !Ref InternetGateway

  # Establish Public Subnet 
  PublicSubnet1: 
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: 10.0.10.0/24 
      MapPublicIpOnLaunch: true 
      AvailabilityZone: "us-west-2a" 
      Tags: 
      - Key: Name 
        Value: !Join ['', ['PublicSubnet1 - ', !Ref 'AWS::StackName'] ] 
      - Key: SubnetType 
        Value: Public 
  
  PublicSubnet2: 
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: 10.0.12.0/24 
      MapPublicIpOnLaunch: true 
      AvailabilityZone: "us-west-2b" 
      Tags: 
      - Key: Name 
        Value: !Join ['', ['PublicSubnet2 - ', !Ref 'AWS::StackName'] ] 
      - Key: SubnetType 
        Value: Public 
  
  PublicSubnet3:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.0.13.0/24
     MapPublicIpOnLaunch: true
     AvailabilityZone: "us-west-2c"
     Tags:
     - Key: Name
       Value: !Join ['', ['PublicSubnet3 - ', !Ref 'AWS::StackName'] ]
     - Key: SubnetType
       Value: Public

  # Establish Web Server Subnet
  NatSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-west-2a"
      Tags:
      - Key: Name
        Value: !Join ['', ['NatSubnet1 - ', !Ref 'AWS::StackName'] ]
      - Key: SubnetType
        Value: Private
  
  NatSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.22.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-west-2b"
      Tags:
      - Key: Name
        Value: !Join ['', ['NatSubnet2 - ', !Ref 'AWS::StackName'] ]
      - Key: SubnetType
        Value: Private
  
  NatSubnet3:
     Type: AWS::EC2::Subnet
     Properties:
       VpcId: !Ref VPC
       CidrBlock: 10.0.23.0/24
       MapPublicIpOnLaunch: false
       AvailabilityZone: "us-west-2c"
       Tags:
       - Key: Name
         Value: !Join ['', ['NatSubnet3 - ', !Ref 'AWS::StackName'] ]
       - Key: SubnetType
         Value: Private

  # Establish Private Database Subnet 
  PrivateSubnet1: 
     Type: AWS::EC2::Subnet 
     Properties: 
       VpcId: !Ref VPC 
       CidrBlock: 10.0.31.0/24 
       MapPublicIpOnLaunch: false 
       AvailabilityZone: "us-west-2a" 
       Tags: 
       - Key: Name 
         Value: !Join ['', ['PrivateSubnet1 - ', !Ref 'AWS::StackName'] ] 
       - Key: SubnetType 
         Value: Private 
  
  PrivateSubnet2: 
     Type: AWS::EC2::Subnet 
     Properties: 
       VpcId: !Ref VPC 
       CidrBlock: 10.0.32.0/24 
       MapPublicIpOnLaunch: false 
       AvailabilityZone: "us-west-2b" 
       Tags: 
       - Key: Name 
         Value: !Join ['', ['PrivateSubnet2 - ', !Ref 'AWS::StackName'] ]
       - Key: SubnetType 
         Value: Private
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.33.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-west-2c"
      Tags:
      - Key: Name
        Value: !Join ['', ['PrivateSubnet3 - ', !Ref 'AWS::StackName'] ]
      - Key: SubnetType
        Value: Private

  # Establish NatGateway for each routes
  NatEIP1:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc
  
  NatGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Join ['', ['NatGateway1 - ', !Ref 'AWS::StackName'] ]
  
  NatRoute1:
      Type: AWS::EC2::Route
      Properties:
         RouteTableId: !Ref NatRouteTable1
         DestinationCidrBlock: 0.0.0.0/0
         NatGatewayId: !Ref NatGateway1
  
  NatRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
         Tags:
            - Key: Name
              Value: !Join ['', ['NatRouteTable1 - ', !Ref 'AWS::StackName'] ]
            - Key: Network
              Value: Public
         VpcId: !Ref VPC

  NatEIP2:
      Type: AWS::EC2::EIP
      Properties:
         Domain: vpc

  NatGateway2:
     DependsOn: VPCGatewayAttachment
     Type: AWS::EC2::NatGateway
     Properties:
       AllocationId: !GetAtt NatEIP2.AllocationId
       SubnetId: !Ref PublicSubnet2
       Tags:
         - Key: Name
           Value: !Join ['', ['NatGateway2 - ', !Ref 'AWS::StackName'] ]

  NatRoute2:
     Type: AWS::EC2::Route
     Properties:
       RouteTableId: !Ref NatRouteTable2
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NatGateway2

  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
       Tags:
          - Key: Name
            Value: !Join ['', ['NatRouteTable2 - ', !Ref 'AWS::StackName'] ]
          - Key: Network
            Value: Public
       VpcId: !Ref VPC


  #NatEIP3:
  #  Type: AWS::EC2::EIP
  #  Properties:
  #    Domain: vpc
  
  #NatGateway3:
  #  DependsOn: VPCGatewayAttachment
  #  Type: AWS::EC2::NatGateway
  #  Properties:
  #    AllocationId: !GetAtt NatEIP3.AllocationId
  #    SubnetId: !Ref PublicSubnet3
  #    Tags:
  #      - Key: Name
  #        Value: !Join ['', ['NatGateway3 - ', !Ref 'AWS::StackName'] ]
  
  #NatRoute3:
  #  Type: AWS::EC2::Route
  #  Properties:
  #    RouteTableId: !Ref NatRouteTable3
  #    DestinationCidrBlock: 0.0.0.0/0
  #    NatGatewayId: !Ref NatGateway3
   
  #NatRouteTable3:
  #  Type: AWS::EC2::RouteTable
  #  Properties:
  #    Tags:
  #      - Key: Name
  #        Value: !Join ['', ['NatRouteTable3 - ', !Ref 'AWS::StackName'] ]
  #      - Key: Network
  #        Value: Public
  #    VpcId: !Ref VPC

  # Public Route/RouteTable
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable:
     Type: AWS::EC2::RouteTable
     Properties:
       VpcId: !Ref VPC
       Tags:
         - Key: Name
           Value: !Join ['', ['PublicRouteTable - ', !Ref 'AWS::StackName'] ]
         - Key: Network
           Value: Public

  # Public Subnet RouteTable Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  # Web Subnet RouteTable Association
  NatSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref NatSubnet1

  NatSubnetRouteTableAssociation2:
     Type: AWS::EC2::SubnetRouteTableAssociation
     Properties:
        RouteTableId: !Ref NatRouteTable2
        SubnetId: !Ref NatSubnet2

  #NatSubnetRouteTableAssociation3:
  #    Type: AWS::EC2::SubnetRouteTableAssociation
  #    Properties:
  #       RouteTableId: !Ref NatRouteTable3
  #       SubnetId: !Ref NatSubnet3

  # Data Subnet RouteTable Association

  #PrivateSubnetRouteTableAssociation1:
  #  Type: AWS::EC2::SubnetRouteTableAssociation
  #  Properties:
  #    RouteTableId: !Ref NatRouteTable1
  #    SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref PrivateSubnet2

  #PrivateSubnetRouteTableAssociation3:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref NatRouteTable3
  #     SubnetId: !Ref PrivateSubnet3

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda-associated security group to give functions access to an RDS instance.
      GroupName: SecurityGroup
      Tags: 
        - Key: Name 
          Value: !Join ['', ['SecurityGroup - ', !Ref 'AWS::StackName'] ]
      VpcId: !Ref VPC

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: security group for the RDS instance.
      GroupName: DatabaseSecurityGroup
      SecurityGroupIngress: 
        -
          Description: connection to database security group
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroup
      Tags: 
        - Key: Name 
          Value: !Join ['', ['DatabaseSecurityGroup - ', !Ref 'AWS::StackName'] ]
      VpcId: !Ref VPC

Outputs:
  #VPC:
  #  Value: !Ref VPC
  #  Export:
  #    Name: !Sub "${AWS::StackName}-VPC"

  #PublicSubnet1:
  #  Value: !Ref PublicSubnet1
  #  Export:
  #    Name: !Sub "${AWS::StackName}-PublicSubnet1"

  #PublicSubnet2:
  #  Value: !Ref PublicSubnet2
  #  Export:
  #    Name: !Sub "${AWS::StackName}-PublicSubnet2"

  #PublicSubnet3:
  #  Value: !Ref PublicSubnet3
  #  Export:
  #    Name: !Sub "${AWS::StackName}-PublicSubnet3"

  #NatSubnet1:
  #  Value: !Ref NatSubnet1
  #  Export:
  #    Name: !Sub "${AWS::StackName}-NatSubnet1"

  #NatSubnet2:
  #  Value: !Ref NatSubnet2
  #  Export:
  #    Name: !Sub "${AWS::StackName}-NatSubnet2"

   # NatSubnet3:
   #    Value: !Ref NatSubnet3
   #    Export:
   #       Name: !Sub "${AWS::StackName}-NatSubnet3"

  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: cloudformation-PrivateSubnet1

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: cloudformation-PrivateSubnet2

  #PrivateSubnet3:
  #  Value: !Ref PrivateSubnet3
  #  Export:
  #    Name: !Sub "${AWS::StackName}-PrivateSubnet3" 

  SecurityGroup:
    Value: !Ref SecurityGroup
    Export:
      Name: cloudformation-LambdaSecurityGroup

  DatabaseSecurityGroup:
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: cloudformation-DatabaseSecurityGroup